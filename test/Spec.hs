import Data.Array
import Data.Word

import AES256
import KDF
import MooMoo
import SHA2

test' :: [IO Bool] -> IO Bool

test' [] = return True

test' (e:es) =
  e >>= \ x -> if not x then return False else test' es

test :: String -> [IO Bool] -> IO Bool

test name es =
  print ("[ RUN      ] " ++ name) >>
  test' es >>=
  \ x ->
    print ((if not x then "[  FAILED  ] " else "[       OK ] ") ++ name) >>
    return x

testsuite' :: [IO Bool] -> IO Bool

testsuite' [] = return True

testsuite' (t:ts) = t >>= \ x -> testsuite' ts >>= \ y -> return (x && y)

testsuite :: String -> [IO Bool] -> IO Bool

testsuite name tests =
  print ("[----------] tests from " ++ name) >>
  testsuite' tests >>=
  \ x -> print "[----------]" >> return x

expect_that :: a -> (a -> IO Bool) -> IO Bool

expect_that val matcher = matcher val

memeq :: (Eq a, Show a) => String -> a -> a -> IO Bool

memeq varname actual expected =
  if actual == expected
    then
      return True
    else
      print ("Value of: " ++ varname) >>
      print ("  Actual: " ++ (show actual)) >>
      print ("Expected: " ++ (show expected)) >>
      return False

expect_memeq :: (Eq a, Show a) => String -> a -> a -> IO Bool

expect_memeq varname actual expected =
  expect_that actual (\ u -> memeq varname u expected)

nomod_aes256 :: Bool -> [Word8] -> [Word8] -> [Word8]

nomod_aes256 _ [] _ = []

nomod_aes256 is_enc text key =
  out ++ (nomod_aes256 is_enc text'' key)
  where
    (text', text'') = splitAt AES256.size_block text
    out
      | is_enc    = AES256.encrypt text' key
      | otherwise = AES256.decrypt text' key

from_str :: String -> [Word8]

from_str s = [fromIntegral (fromEnum c)::Word8 | c <- s]

test_aes256 = do
  let
    --  From FIPS-197
    t1_key = [
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
      0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]
    t1_ptext = [
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
      0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF]
    t1_ctext = [
      0x8E, 0xA2, 0xB7, 0xCA, 0x51, 0x67, 0x45, 0xBF,
      0xEA, 0xFC, 0x49, 0x90, 0x4B, 0x49, 0x60, 0x89]

    -- From Linux/crypto/testmgr (inputs genereated w/ Crypto++)
    -- TODO: maybe use Crypto++ instead
    t2_key = [
      0xA6, 0xC9, 0x83, 0xA6, 0xC9, 0xEC, 0x0F, 0x32,
      0x55, 0x0F, 0x32, 0x55, 0x78, 0x9B, 0xBE, 0x78,
      0x9B, 0xBE, 0xE1, 0x04, 0x27, 0xE1, 0x04, 0x27,
      0x4A, 0x6D, 0x90, 0x4A, 0x6D, 0x90, 0xB3, 0xD6]
    t2_ptext = [
      0x50, 0xB9, 0x22, 0xAE, 0x17, 0x80, 0x0C, 0x75,
      0xDE, 0x47, 0xD3, 0x3C, 0xA5, 0x0E, 0x9A, 0x03,
      0x6C, 0xF8, 0x61, 0xCA, 0x33, 0xBF, 0x28, 0x91,
      0x1D, 0x86, 0xEF, 0x58, 0xE4, 0x4D, 0xB6, 0x1F,
      0xAB, 0x14, 0x7D, 0x09, 0x72, 0xDB, 0x44, 0xD0,
      0x39, 0xA2, 0x0B, 0x97, 0x00, 0x69, 0xF5, 0x5E,
      0xC7, 0x30, 0xBC, 0x25, 0x8E, 0x1A, 0x83, 0xEC,
      0x55, 0xE1, 0x4A, 0xB3, 0x1C, 0xA8, 0x11, 0x7A,
      0x06, 0x6F, 0xD8, 0x41, 0xCD, 0x36, 0x9F, 0x08,
      0x94, 0xFD, 0x66, 0xF2, 0x5B, 0xC4, 0x2D, 0xB9,
      0x22, 0x8B, 0x17, 0x80, 0xE9, 0x52, 0xDE, 0x47,
      0xB0, 0x19, 0xA5, 0x0E, 0x77, 0x03, 0x6C, 0xD5,
      0x3E, 0xCA, 0x33, 0x9C, 0x05, 0x91, 0xFA, 0x63,
      0xEF, 0x58, 0xC1, 0x2A, 0xB6, 0x1F, 0x88, 0x14,
      0x7D, 0xE6, 0x4F, 0xDB, 0x44, 0xAD, 0x16, 0xA2,
      0x0B, 0x74, 0x00, 0x69, 0xD2, 0x3B, 0xC7, 0x30,
      0x99, 0x02, 0x8E, 0xF7, 0x60, 0xEC, 0x55, 0xBE,
      0x27, 0xB3, 0x1C, 0x85, 0x11, 0x7A, 0xE3, 0x4C,
      0xD8, 0x41, 0xAA, 0x13, 0x9F, 0x08, 0x71, 0xFD,
      0x66, 0xCF, 0x38, 0xC4, 0x2D, 0x96, 0x22, 0x8B,
      0xF4, 0x5D, 0xE9, 0x52, 0xBB, 0x24, 0xB0, 0x19,
      0x82, 0x0E, 0x77, 0xE0, 0x49, 0xD5, 0x3E, 0xA7,
      0x10, 0x9C, 0x05, 0x6E, 0xFA, 0x63, 0xCC, 0x35,
      0xC1, 0x2A, 0x93, 0x1F, 0x88, 0xF1, 0x5A, 0xE6,
      0x4F, 0xB8, 0x21, 0xAD, 0x16, 0x7F, 0x0B, 0x74,
      0xDD, 0x46, 0xD2, 0x3B, 0xA4, 0x0D, 0x99, 0x02,
      0x6B, 0xF7, 0x60, 0xC9, 0x32, 0xBE, 0x27, 0x90,
      0x1C, 0x85, 0xEE, 0x57, 0xE3, 0x4C, 0xB5, 0x1E,
      0xAA, 0x13, 0x7C, 0x08, 0x71, 0xDA, 0x43, 0xCF,
      0x38, 0xA1, 0x0A, 0x96, 0xFF, 0x68, 0xF4, 0x5D,
      0xC6, 0x2F, 0xBB, 0x24, 0x8D, 0x19, 0x82, 0xEB,
      0x54, 0xE0, 0x49, 0xB2, 0x1B, 0xA7, 0x10, 0x79,
      0x05, 0x6E, 0xD7, 0x40, 0xCC, 0x35, 0x9E, 0x07,
      0x93, 0xFC, 0x65, 0xF1, 0x5A, 0xC3, 0x2C, 0xB8,
      0x21, 0x8A, 0x16, 0x7F, 0xE8, 0x51, 0xDD, 0x46,
      0xAF, 0x18, 0xA4, 0x0D, 0x76, 0x02, 0x6B, 0xD4,
      0x3D, 0xC9, 0x32, 0x9B, 0x04, 0x90, 0xF9, 0x62,
      0xEE, 0x57, 0xC0, 0x29, 0xB5, 0x1E, 0x87, 0x13,
      0x7C, 0xE5, 0x4E, 0xDA, 0x43, 0xAC, 0x15, 0xA1,
      0x0A, 0x73, 0xFF, 0x68, 0xD1, 0x3A, 0xC6, 0x2F,
      0x98, 0x01, 0x8D, 0xF6, 0x5F, 0xEB, 0x54, 0xBD,
      0x26, 0xB2, 0x1B, 0x84, 0x10, 0x79, 0xE2, 0x4B,
      0xD7, 0x40, 0xA9, 0x12, 0x9E, 0x07, 0x70, 0xFC,
      0x65, 0xCE, 0x37, 0xC3, 0x2C, 0x95, 0x21, 0x8A,
      0xF3, 0x5C, 0xE8, 0x51, 0xBA, 0x23, 0xAF, 0x18,
      0x81, 0x0D, 0x76, 0xDF, 0x48, 0xD4, 0x3D, 0xA6,
      0x0F, 0x9B, 0x04, 0x6D, 0xF9, 0x62, 0xCB, 0x34,
      0xC0, 0x29, 0x92, 0x1E, 0x87, 0xF0, 0x59, 0xE5,
      0x4E, 0xB7, 0x20, 0xAC, 0x15, 0x7E, 0x0A, 0x73,
      0xDC, 0x45, 0xD1, 0x3A, 0xA3, 0x0C, 0x98, 0x01,
      0x6A, 0xF6, 0x5F, 0xC8, 0x31, 0xBD, 0x26, 0x8F,
      0x1B, 0x84, 0xED, 0x56, 0xE2, 0x4B, 0xB4, 0x1D,
      0xA9, 0x12, 0x7B, 0x07, 0x70, 0xD9, 0x42, 0xCE,
      0x37, 0xA0, 0x09, 0x95, 0xFE, 0x67, 0xF3, 0x5C,
      0xC5, 0x2E, 0xBA, 0x23, 0x8C, 0x18, 0x81, 0xEA,
      0x53, 0xDF, 0x48, 0xB1, 0x1A, 0xA6, 0x0F, 0x78,
      0x04, 0x6D, 0xD6, 0x3F, 0xCB, 0x34, 0x9D, 0x06,
      0x92, 0xFB, 0x64, 0xF0, 0x59, 0xC2, 0x2B, 0xB7,
      0x20, 0x89, 0x15, 0x7E, 0xE7, 0x50, 0xDC, 0x45,
      0xAE, 0x17, 0xA3, 0x0C, 0x75, 0x01, 0x6A, 0xD3,
      0x3C, 0xC8, 0x31, 0x9A, 0x03, 0x8F, 0xF8, 0x61,
      0xED, 0x56, 0xBF, 0x28, 0xB4, 0x1D, 0x86, 0x12]
    t2_ctext = [
      0x71, 0x73, 0xF7, 0xDB, 0x24, 0x93, 0x21, 0x6D,
      0x61, 0x1E, 0xBB, 0x63, 0x42, 0x79, 0xDB, 0x64,
      0x6F, 0x82, 0xC0, 0xCA, 0xA3, 0x9B, 0xFA, 0x0B,
      0xD9, 0x08, 0xC7, 0x4A, 0x90, 0xAE, 0x8F, 0x5F,
      0x5E, 0x06, 0xF0, 0x5F, 0x31, 0x51, 0x18, 0x37,
      0x45, 0xD7, 0xCA, 0x3A, 0xFD, 0x6C, 0x3F, 0xE1,
      0xDD, 0x8D, 0x22, 0x65, 0x2B, 0x00, 0x50, 0xCE,
      0xBA, 0x28, 0x67, 0xD7, 0xCE, 0x0E, 0x0D, 0xEA,
      0x78, 0x69, 0x7F, 0xAE, 0x8F, 0x8B, 0x69, 0x37,
      0x75, 0xE0, 0xDC, 0x96, 0xE0, 0xB7, 0xF4, 0x09,
      0xCB, 0x6D, 0xA2, 0xFB, 0xDA, 0xAF, 0x09, 0xF8,
      0x81, 0x82, 0x27, 0xFA, 0x45, 0x9C, 0x29, 0xA4,
      0x22, 0x8B, 0x78, 0x69, 0x5B, 0x46, 0xF9, 0x39,
      0x1B, 0xCC, 0xF9, 0x1D, 0x09, 0xEB, 0xBC, 0x5C,
      0x41, 0x72, 0x51, 0x97, 0x1D, 0x07, 0x49, 0xA0,
      0x1B, 0x8E, 0x65, 0x4B, 0xB2, 0x6A, 0x12, 0x03,
      0x6A, 0x60, 0x95, 0xAC, 0xBD, 0xAC, 0x1A, 0x64,
      0xDE, 0x5A, 0xA5, 0xF0, 0x83, 0x2F, 0xCB, 0xCA,
      0x22, 0x74, 0xA6, 0x6C, 0x9B, 0x73, 0xCE, 0x3F,
      0xE1, 0x8B, 0x22, 0x17, 0x59, 0x0C, 0x47, 0x89,
      0x33, 0xA1, 0xD6, 0x47, 0x03, 0x19, 0x4F, 0xA8,
      0x67, 0x69, 0xF0, 0x5B, 0xF0, 0x20, 0xAD, 0x06,
      0x27, 0x81, 0x92, 0xD8, 0xC5, 0xBA, 0x98, 0x12,
      0xBE, 0x24, 0xB5, 0x2F, 0x75, 0x02, 0xC2, 0xAD,
      0x12, 0x2F, 0x07, 0x32, 0xEE, 0x39, 0xAF, 0x64,
      0x05, 0x8F, 0xB3, 0xD4, 0xEB, 0x1B, 0x46, 0x6E,
      0xD9, 0x21, 0xF9, 0xC4, 0xB7, 0xC9, 0x45, 0x68,
      0xB4, 0xA1, 0x74, 0x9F, 0x82, 0x47, 0xEB, 0xCC,
      0xBD, 0x0A, 0x14, 0x95, 0x0F, 0x8B, 0xA8, 0x2F,
      0x4B, 0x1B, 0xA7, 0xBF, 0x82, 0xA6, 0x43, 0x0C,
      0xB9, 0x39, 0x4A, 0xA8, 0x10, 0x6F, 0x50, 0x7B,
      0x25, 0xFB, 0x26, 0x81, 0xE0, 0x2F, 0xF0, 0x96,
      0x8D, 0x8B, 0xAC, 0x92, 0x0F, 0xF6, 0xED, 0x64,
      0x63, 0x29, 0x4C, 0x8E, 0x18, 0x13, 0xC5, 0xBF,
      0xFC, 0xA0, 0xD9, 0xBF, 0x7C, 0x3A, 0x0E, 0x29,
      0x6F, 0xD1, 0x6C, 0x6F, 0xA5, 0xDA, 0xBF, 0xB1,
      0x30, 0xEA, 0x44, 0x2D, 0xC3, 0x8F, 0x16, 0xE1,
      0x66, 0xFA, 0xA3, 0x21, 0x3E, 0xFC, 0x13, 0xCA,
      0xF0, 0xF6, 0xF0, 0x59, 0xBD, 0x8F, 0x38, 0x50,
      0x31, 0xCB, 0x69, 0x3F, 0x96, 0x15, 0xD6, 0xF5,
      0xAE, 0xFF, 0xF6, 0xAA, 0x41, 0x85, 0x4C, 0x10,
      0x58, 0xE3, 0xF9, 0x44, 0xE6, 0x28, 0xDA, 0x9A,
      0xDC, 0x6A, 0x80, 0x34, 0x73, 0x97, 0x1B, 0xC5,
      0xCA, 0x26, 0x16, 0x77, 0x0E, 0x60, 0xAB, 0x89,
      0x0F, 0x04, 0x27, 0xBD, 0xCE, 0x3E, 0x71, 0xB4,
      0xA0, 0xD7, 0x22, 0x7E, 0xDB, 0xEB, 0x24, 0x70,
      0x42, 0x71, 0x51, 0x78, 0x70, 0xB3, 0xE0, 0x3D,
      0x84, 0x8E, 0x8D, 0x7B, 0xD0, 0x6D, 0xEA, 0x92,
      0x11, 0x08, 0x42, 0x4F, 0xE5, 0xAD, 0x26, 0x92,
      0xD2, 0x00, 0xAE, 0xA8, 0xE3, 0x4B, 0x37, 0x47,
      0x22, 0xC1, 0x95, 0xC1, 0x63, 0x7F, 0xCB, 0x03,
      0xF3, 0xE3, 0xD7, 0x9D, 0x60, 0xC7, 0xBC, 0xEA,
      0x35, 0xA2, 0xFD, 0x45, 0x52, 0x39, 0x13, 0x6F,
      0xC1, 0x53, 0xF3, 0x53, 0xDF, 0x33, 0x84, 0xD7,
      0xD2, 0xC8, 0x37, 0xB0, 0x75, 0xE3, 0x41, 0x46,
      0xB3, 0xC7, 0x83, 0x2E, 0x8A, 0xBB, 0xA4, 0xE5,
      0x7F, 0x3C, 0xFD, 0x8B, 0xEB, 0xEA, 0x63, 0xBD,
      0xB7, 0x46, 0xE7, 0xBF, 0x09, 0x9C, 0x0D, 0x0F,
      0x40, 0x86, 0x7F, 0x51, 0xE1, 0x11, 0x9C, 0xCB,
      0x88, 0xE6, 0x68, 0x47, 0xE3, 0x2B, 0xC5, 0xFF,
      0x09, 0x79, 0xA0, 0x43, 0x5C, 0x0D, 0x08, 0x58,
      0x17, 0xBB, 0xC0, 0x6B, 0x62, 0x3F, 0x56, 0xE9]
  testsuite "AES256NoMod" [
    test "EncryptFIPS197" [
      expect_memeq "t1_ctext" (nomod_aes256 True t1_ptext t1_key) t1_ctext],
    test "EncryptTestmgr" [
      expect_memeq "t2_ctext" (nomod_aes256 True t2_ptext t2_key) t2_ctext],
    test "DecryptFIPS197" [
      expect_memeq "t1_ptext" (nomod_aes256 False t1_ctext t1_key) t1_ptext],
    test "DecryptTestmgr" [
      expect_memeq "t2_ptext" (nomod_aes256 False t2_ctext t2_key) t2_ptext]]

test_aes256_cbc = do
  let
    --  From NIST SP800-38A
    t1_key = [
      0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
      0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
      0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
      0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4]
    t1_iv = [
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
      0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]
    t1_iv_out = [
      0xB2, 0xEB, 0x05, 0xE2, 0xC3, 0x9B, 0xE9, 0xFC,
      0xDA, 0x6C, 0x19, 0x07, 0x8C, 0x6A, 0x9D, 0x1B]
    t1_ptext = [
      0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
      0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
      0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
      0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
      0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
      0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
      0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
      0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10]
    t1_ctext = [
      0xF5, 0x8C, 0x4C, 0x04, 0xD6, 0xE5, 0xF1, 0xBA,
      0x77, 0x9E, 0xAB, 0xFB, 0x5F, 0x7B, 0xFB, 0xD6,
      0x9C, 0xFC, 0x4E, 0x96, 0x7E, 0xDB, 0x80, 0x8D,
      0x67, 0x9F, 0x77, 0x7B, 0xC6, 0x70, 0x2C, 0x7D,
      0x39, 0xF2, 0x33, 0x69, 0xA9, 0xD9, 0xBA, 0xCF,
      0xA5, 0x30, 0xE2, 0x63, 0x04, 0x23, 0x14, 0x61,
      0xB2, 0xEB, 0x05, 0xE2, 0xC3, 0x9B, 0xE9, 0xFC,
      0xDA, 0x6C, 0x19, 0x07, 0x8C, 0x6A, 0x9D, 0x1B]

    -- From Linux/crypto/testmgr (inputs genereated w/ Crypto++)
    -- TODO: maybe use Crypto++ instead
    t2_key = [
      0xC9, 0x83, 0xA6, 0xC9, 0xEC, 0x0F, 0x32, 0x55,
      0x0F, 0x32, 0x55, 0x78, 0x9B, 0xBE, 0x78, 0x9B,
      0xBE, 0xE1, 0x04, 0x27, 0xE1, 0x04, 0x27, 0x4A,
      0x6D, 0x90, 0x4A, 0x6D, 0x90, 0xB3, 0xD6, 0xF9]
    t2_iv = [
      0xE7, 0x82, 0x1D, 0xB8, 0x53, 0x11, 0xAC, 0x47,
      0xE2, 0x7D, 0x18, 0xD6, 0x71, 0x0C, 0xA7, 0x42]
    t2_iv_out = [
      0xE0, 0x1F, 0x91, 0xF8, 0x82, 0x96, 0x2D, 0x65,
      0xA3, 0xAA, 0x13, 0xCC, 0x50, 0xFF, 0x7B, 0x02]
    t2_ptext = [
      0x50, 0xB9, 0x22, 0xAE, 0x17, 0x80, 0x0C, 0x75,
      0xDE, 0x47, 0xD3, 0x3C, 0xA5, 0x0E, 0x9A, 0x03,
      0x6C, 0xF8, 0x61, 0xCA, 0x33, 0xBF, 0x28, 0x91,
      0x1D, 0x86, 0xEF, 0x58, 0xE4, 0x4D, 0xB6, 0x1F,
      0xAB, 0x14, 0x7D, 0x09, 0x72, 0xDB, 0x44, 0xD0,
      0x39, 0xA2, 0x0B, 0x97, 0x00, 0x69, 0xF5, 0x5E,
      0xC7, 0x30, 0xBC, 0x25, 0x8E, 0x1A, 0x83, 0xEC,
      0x55, 0xE1, 0x4A, 0xB3, 0x1C, 0xA8, 0x11, 0x7A,
      0x06, 0x6F, 0xD8, 0x41, 0xCD, 0x36, 0x9F, 0x08,
      0x94, 0xFD, 0x66, 0xF2, 0x5B, 0xC4, 0x2D, 0xB9,
      0x22, 0x8B, 0x17, 0x80, 0xE9, 0x52, 0xDE, 0x47,
      0xB0, 0x19, 0xA5, 0x0E, 0x77, 0x03, 0x6C, 0xD5,
      0x3E, 0xCA, 0x33, 0x9C, 0x05, 0x91, 0xFA, 0x63,
      0xEF, 0x58, 0xC1, 0x2A, 0xB6, 0x1F, 0x88, 0x14,
      0x7D, 0xE6, 0x4F, 0xDB, 0x44, 0xAD, 0x16, 0xA2,
      0x0B, 0x74, 0x00, 0x69, 0xD2, 0x3B, 0xC7, 0x30,
      0x99, 0x02, 0x8E, 0xF7, 0x60, 0xEC, 0x55, 0xBE,
      0x27, 0xB3, 0x1C, 0x85, 0x11, 0x7A, 0xE3, 0x4C,
      0xD8, 0x41, 0xAA, 0x13, 0x9F, 0x08, 0x71, 0xFD,
      0x66, 0xCF, 0x38, 0xC4, 0x2D, 0x96, 0x22, 0x8B,
      0xF4, 0x5D, 0xE9, 0x52, 0xBB, 0x24, 0xB0, 0x19,
      0x82, 0x0E, 0x77, 0xE0, 0x49, 0xD5, 0x3E, 0xA7,
      0x10, 0x9C, 0x05, 0x6E, 0xFA, 0x63, 0xCC, 0x35,
      0xC1, 0x2A, 0x93, 0x1F, 0x88, 0xF1, 0x5A, 0xE6,
      0x4F, 0xB8, 0x21, 0xAD, 0x16, 0x7F, 0x0B, 0x74,
      0xDD, 0x46, 0xD2, 0x3B, 0xA4, 0x0D, 0x99, 0x02,
      0x6B, 0xF7, 0x60, 0xC9, 0x32, 0xBE, 0x27, 0x90,
      0x1C, 0x85, 0xEE, 0x57, 0xE3, 0x4C, 0xB5, 0x1E,
      0xAA, 0x13, 0x7C, 0x08, 0x71, 0xDA, 0x43, 0xCF,
      0x38, 0xA1, 0x0A, 0x96, 0xFF, 0x68, 0xF4, 0x5D,
      0xC6, 0x2F, 0xBB, 0x24, 0x8D, 0x19, 0x82, 0xEB,
      0x54, 0xE0, 0x49, 0xB2, 0x1B, 0xA7, 0x10, 0x79,
      0x05, 0x6E, 0xD7, 0x40, 0xCC, 0x35, 0x9E, 0x07,
      0x93, 0xFC, 0x65, 0xF1, 0x5A, 0xC3, 0x2C, 0xB8,
      0x21, 0x8A, 0x16, 0x7F, 0xE8, 0x51, 0xDD, 0x46,
      0xAF, 0x18, 0xA4, 0x0D, 0x76, 0x02, 0x6B, 0xD4,
      0x3D, 0xC9, 0x32, 0x9B, 0x04, 0x90, 0xF9, 0x62,
      0xEE, 0x57, 0xC0, 0x29, 0xB5, 0x1E, 0x87, 0x13,
      0x7C, 0xE5, 0x4E, 0xDA, 0x43, 0xAC, 0x15, 0xA1,
      0x0A, 0x73, 0xFF, 0x68, 0xD1, 0x3A, 0xC6, 0x2F,
      0x98, 0x01, 0x8D, 0xF6, 0x5F, 0xEB, 0x54, 0xBD,
      0x26, 0xB2, 0x1B, 0x84, 0x10, 0x79, 0xE2, 0x4B,
      0xD7, 0x40, 0xA9, 0x12, 0x9E, 0x07, 0x70, 0xFC,
      0x65, 0xCE, 0x37, 0xC3, 0x2C, 0x95, 0x21, 0x8A,
      0xF3, 0x5C, 0xE8, 0x51, 0xBA, 0x23, 0xAF, 0x18,
      0x81, 0x0D, 0x76, 0xDF, 0x48, 0xD4, 0x3D, 0xA6,
      0x0F, 0x9B, 0x04, 0x6D, 0xF9, 0x62, 0xCB, 0x34,
      0xC0, 0x29, 0x92, 0x1E, 0x87, 0xF0, 0x59, 0xE5,
      0x4E, 0xB7, 0x20, 0xAC, 0x15, 0x7E, 0x0A, 0x73,
      0xDC, 0x45, 0xD1, 0x3A, 0xA3, 0x0C, 0x98, 0x01,
      0x6A, 0xF6, 0x5F, 0xC8, 0x31, 0xBD, 0x26, 0x8F,
      0x1B, 0x84, 0xED, 0x56, 0xE2, 0x4B, 0xB4, 0x1D,
      0xA9, 0x12, 0x7B, 0x07, 0x70, 0xD9, 0x42, 0xCE,
      0x37, 0xA0, 0x09, 0x95, 0xFE, 0x67, 0xF3, 0x5C,
      0xC5, 0x2E, 0xBA, 0x23, 0x8C, 0x18, 0x81, 0xEA,
      0x53, 0xDF, 0x48, 0xB1, 0x1A, 0xA6, 0x0F, 0x78,
      0x04, 0x6D, 0xD6, 0x3F, 0xCB, 0x34, 0x9D, 0x06,
      0x92, 0xFB, 0x64, 0xF0, 0x59, 0xC2, 0x2B, 0xB7,
      0x20, 0x89, 0x15, 0x7E, 0xE7, 0x50, 0xDC, 0x45,
      0xAE, 0x17, 0xA3, 0x0C, 0x75, 0x01, 0x6A, 0xD3,
      0x3C, 0xC8, 0x31, 0x9A, 0x03, 0x8F, 0xF8, 0x61,
      0xED, 0x56, 0xBF, 0x28, 0xB4, 0x1D, 0x86, 0x12]
    t2_ctext = [
      0xEA, 0x65, 0x8A, 0x19, 0xB0, 0x66, 0xC1, 0x3F,
      0xCE, 0xF1, 0x97, 0x75, 0xC1, 0xFD, 0xB5, 0xAF,
      0x52, 0x65, 0xF7, 0xFF, 0xBC, 0xD8, 0x2D, 0x9F,
      0x2F, 0xB9, 0x26, 0x9B, 0x6F, 0x10, 0xB7, 0xB8,
      0x26, 0xA1, 0x02, 0x46, 0xA2, 0xAD, 0xC6, 0xC0,
      0x11, 0x15, 0xFF, 0x6D, 0x1E, 0x82, 0x04, 0xA6,
      0xB1, 0x74, 0xD1, 0x08, 0x13, 0xFD, 0x90, 0x7C,
      0xF5, 0xED, 0xD3, 0xDB, 0x5A, 0x0A, 0x0C, 0x2F,
      0x0A, 0x70, 0xF1, 0x88, 0x07, 0xCF, 0x21, 0x26,
      0x40, 0x40, 0x8A, 0xF5, 0x53, 0xF7, 0x24, 0x4F,
      0x83, 0x38, 0x43, 0x5F, 0x08, 0x99, 0xEB, 0xE3,
      0xDC, 0x02, 0x64, 0x67, 0x50, 0x6E, 0x15, 0xC3,
      0x01, 0x1A, 0xA0, 0x81, 0x13, 0x65, 0xA6, 0x73,
      0x71, 0xA6, 0x3B, 0x91, 0x83, 0x77, 0xBE, 0xFA,
      0xDB, 0x71, 0x73, 0xA6, 0xC1, 0xAE, 0x43, 0xC3,
      0x36, 0xCE, 0xD6, 0xEB, 0xF9, 0x30, 0x1C, 0x4F,
      0x80, 0x38, 0x5E, 0x9C, 0x6E, 0xAB, 0x98, 0x2F,
      0x53, 0xAF, 0xCF, 0xC8, 0x9A, 0xB8, 0x86, 0x43,
      0x3E, 0x86, 0xE7, 0xA1, 0xF4, 0x2F, 0x30, 0x40,
      0x03, 0xA8, 0x6C, 0x50, 0x42, 0x9F, 0x77, 0x59,
      0x89, 0xA0, 0xC5, 0xEC, 0x9A, 0xB8, 0xDD, 0x99,
      0x16, 0x24, 0x02, 0x07, 0x48, 0xAE, 0xF2, 0x31,
      0x34, 0x0E, 0xC3, 0x85, 0xFE, 0x1C, 0x95, 0x99,
      0x87, 0x58, 0x98, 0x8B, 0xE7, 0xC6, 0xC5, 0x70,
      0x73, 0x81, 0x07, 0x7C, 0x56, 0x2F, 0xD8, 0x1B,
      0xB7, 0xB9, 0x2B, 0xAB, 0xE3, 0x01, 0x87, 0x0F,
      0xD8, 0xBB, 0xC0, 0x0D, 0xAC, 0x2C, 0x2F, 0x98,
      0x3C, 0x0B, 0xA2, 0x99, 0x4A, 0x8C, 0xF7, 0x04,
      0xE0, 0xE0, 0xCF, 0xD1, 0x81, 0x5B, 0xFE, 0xF5,
      0x24, 0x04, 0xFD, 0xB8, 0xDF, 0x13, 0xD8, 0xCD,
      0xF1, 0xE3, 0x3D, 0x98, 0x50, 0x02, 0x77, 0x9E,
      0xBC, 0x22, 0xAB, 0xFA, 0xC2, 0x43, 0x1F, 0x66,
      0x20, 0x02, 0x23, 0xDA, 0xDF, 0xA0, 0x89, 0xF6,
      0xD8, 0xF3, 0x45, 0x24, 0x53, 0x6F, 0x16, 0x77,
      0x02, 0x3E, 0x7B, 0x36, 0x5F, 0xA0, 0x3B, 0x78,
      0x63, 0xA2, 0xBD, 0xB5, 0xA4, 0xCA, 0x1E, 0xD3,
      0x57, 0xBC, 0x0B, 0x9F, 0x43, 0x51, 0x28, 0x4F,
      0x07, 0x50, 0x6C, 0x68, 0x12, 0x07, 0xCF, 0xFA,
      0x6B, 0x72, 0x0B, 0xEB, 0xF8, 0x88, 0x90, 0x2C,
      0x7E, 0xF5, 0x91, 0xD1, 0x03, 0xD8, 0xD5, 0xBD,
      0x22, 0x39, 0x7B, 0x16, 0x03, 0x01, 0x69, 0xAF,
      0x3D, 0x38, 0x66, 0x28, 0x0C, 0xBE, 0x5B, 0xC5,
      0x03, 0xB4, 0x2F, 0x51, 0x8A, 0x56, 0x17, 0x2B,
      0x88, 0x42, 0x6D, 0x40, 0x68, 0x8F, 0xD0, 0x11,
      0x19, 0xF9, 0x1F, 0x43, 0x79, 0x95, 0x31, 0xFA,
      0x28, 0x7A, 0x3D, 0xF7, 0x66, 0xEB, 0xEF, 0xAC,
      0x06, 0xB2, 0x01, 0xAD, 0xDB, 0x68, 0xDB, 0xEC,
      0x8D, 0x53, 0x6E, 0x72, 0x68, 0xA3, 0xC7, 0x63,
      0x43, 0x2B, 0x78, 0xE0, 0x04, 0x29, 0x8F, 0x72,
      0xB2, 0x2C, 0xE6, 0x84, 0x03, 0x30, 0x6D, 0xCD,
      0x26, 0x92, 0x37, 0xE1, 0x2F, 0xBB, 0x8B, 0x9D,
      0xE4, 0x4C, 0xF6, 0x93, 0xBC, 0xD9, 0xAD, 0x44,
      0x52, 0x65, 0xC7, 0xB0, 0x0E, 0x3F, 0x0E, 0x61,
      0x56, 0x5D, 0x1C, 0x6D, 0xA7, 0x05, 0x2E, 0xBC,
      0x58, 0x08, 0x15, 0xAB, 0x12, 0xAB, 0x17, 0x4A,
      0x5E, 0x1C, 0xF2, 0xCD, 0xB8, 0xA2, 0xAE, 0xFB,
      0x9B, 0x2E, 0x0E, 0x85, 0x34, 0x80, 0x0E, 0x3F,
      0x4C, 0xB8, 0xDB, 0xCE, 0x1C, 0x90, 0xA1, 0x61,
      0x6C, 0x69, 0x09, 0x35, 0x9E, 0xD4, 0xF4, 0xAD,
      0xBC, 0x06, 0x41, 0xE3, 0x01, 0xB4, 0x4E, 0x0A,
      0xE0, 0x1F, 0x91, 0xF8, 0x82, 0x96, 0x2D, 0x65,
      0xA3, 0xAA, 0x13, 0xCC, 0x50, 0xFF, 0x7B, 0x02]
  testsuite "AES256CBC" [
    test "EncryptNISTSP80038A" [
      expect_memeq "t1_ctext"
        (MooMoo.cbc_encrypt1 AES256.encrypt
          t1_iv t1_ptext t1_key AES256.size_block) (t1_ctext, t1_iv_out)],
    test "EncryptTestmgr" [
      expect_memeq "t2_ctext"
        (MooMoo.cbc_encrypt1 AES256.encrypt
          t2_iv t2_ptext t2_key AES256.size_block) (t2_ctext, t2_iv_out)],
    test "DecryptNISTSP80038A" [
      expect_memeq "t1_ptext"
        (MooMoo.cbc_decrypt AES256.decrypt
          t1_iv t1_ctext t1_key AES256.size_block) t1_ptext],
    test "DecryptTestmgr" [
      expect_memeq "t2_ptext"
        (MooMoo.cbc_decrypt AES256.decrypt
          t2_iv t2_ctext t2_key AES256.size_block) t2_ptext]]

test_sha256 = do
  let
    --  SHA256 test vectors from NIST
    t1_message = from_str ""
    t1_size = 0
    t1_digest = [
      0xE3, 0xB0, 0xC4, 0x42, 0x98, 0xFC, 0x1C, 0x14,
      0x9A, 0xFB, 0xF4, 0xC8, 0x99, 0x6F, 0xB9, 0x24,
      0x27, 0xAE, 0x41, 0xE4, 0x64, 0x9B, 0x93, 0x4C,
      0xA4, 0x95, 0x99, 0x1B, 0x78, 0x52, 0xB8, 0x55]
    t2_message = from_str "abc"
    t2_size = 3
    t2_digest = [
      0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
      0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
      0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
      0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD]
    t3_message =
      from_str "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
    t3_size = 56
    t3_digest = [
      0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
      0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
      0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
      0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1]
    t4_message = from_str $ "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ++
      "abcdefghijklmnopqrstuvwxyz0123456789+-"
    t4_size = 64
    t4_digest = [
      0xB5, 0xFE, 0xAD, 0x56, 0x7D, 0xFF, 0xCB, 0xA4,
      0x2C, 0x32, 0x29, 0x32, 0x19, 0xBB, 0xFB, 0xFA,
      0xD6, 0xFF, 0x94, 0xA3, 0x72, 0x91, 0x85, 0x66,
      0x3B, 0xA7, 0x87, 0x77, 0x58, 0xA3, 0x40, 0x3A]
    t5_message = [
      0x08, 0x9F, 0x13, 0xAA, 0x41, 0xD8, 0x4C, 0xE3,
      0x7A, 0x11, 0x85, 0x1C, 0xB3, 0x27, 0xBE, 0x55,
      0xEC, 0x60, 0xF7, 0x8E, 0x02, 0x99, 0x30, 0xC7,
      0x3B, 0xD2, 0x69, 0x00, 0x74, 0x0B, 0xA2, 0x16,
      0xAD, 0x44, 0xDB, 0x4F, 0xE6, 0x7D, 0x14, 0x88,
      0x1F, 0xB6, 0x2A, 0xC1, 0x58, 0xEF, 0x63, 0xFA,
      0x91, 0x05, 0x9C, 0x33, 0xCA, 0x3E, 0xD5, 0x6C,
      0x03, 0x77, 0x0E, 0xA5, 0x19, 0xB0, 0x47, 0xDE,
      0x52, 0xE9, 0x80, 0x17, 0x8B, 0x22, 0xB9, 0x2D,
      0xC4, 0x5B, 0xF2, 0x66, 0xFD, 0x94, 0x08, 0x9F,
      0x36, 0xCD, 0x41, 0xD8, 0x6F, 0x06, 0x7A, 0x11,
      0xA8, 0x1C, 0xB3, 0x4A, 0xE1, 0x55, 0xEC, 0x83,
      0x1A, 0x8E, 0x25, 0xBC, 0x30, 0xC7, 0x5E, 0xF5,
      0x69, 0x00, 0x97, 0x0B, 0xA2, 0x39, 0xD0, 0x44,
      0xDB, 0x72, 0x09, 0x7D, 0x14, 0xAB, 0x1F, 0xB6,
      0x4D, 0xE4, 0x58, 0xEF, 0x86, 0x1D, 0x91, 0x28,
      0xBF, 0x33, 0xCA, 0x61, 0xF8, 0x6C, 0x03, 0x9A,
      0x0E, 0xA5, 0x3C, 0xD3, 0x47, 0xDE, 0x75, 0x0C,
      0x80, 0x17, 0xAE, 0x22, 0xB9, 0x50, 0xE7, 0x5B,
      0xF2, 0x89, 0x20, 0x94, 0x2B, 0xC2, 0x36, 0xCD,
      0x64, 0xFB, 0x6F, 0x06, 0x9D, 0x11, 0xA8, 0x3F,
      0xD6, 0x4A, 0xE1, 0x78, 0x0F, 0x83, 0x1A, 0xB1,
      0x25, 0xBC, 0x53, 0xEA, 0x5E, 0xF5, 0x8C, 0x00,
      0x97, 0x2E, 0xC5, 0x39, 0xD0, 0x67, 0xFE, 0x72,
      0x09, 0xA0, 0x14, 0xAB, 0x42, 0xD9, 0x4D, 0xE4,
      0x7B, 0x12, 0x86, 0x1D, 0xB4, 0x28, 0xBF, 0x56,
      0xED, 0x61, 0xF8, 0x8F, 0x03, 0x9A, 0x31, 0xC8,
      0x3C, 0xD3, 0x6A, 0x01, 0x75, 0x0C, 0xA3, 0x17,
      0xAE, 0x45, 0xDC, 0x50, 0xE7, 0x7E, 0x15, 0x89,
      0x20, 0xB7, 0x2B, 0xC2, 0x59, 0xF0, 0x64, 0xFB,
      0x92, 0x06, 0x9D, 0x34, 0xCB, 0x3F, 0xD6, 0x6D,
      0x04, 0x78, 0x0F, 0xA6, 0x1A, 0xB1, 0x48, 0xDF,
      0x53, 0xEA, 0x81, 0x18, 0x8C, 0x23, 0xBA, 0x2E,
      0xC5, 0x5C, 0xF3, 0x67, 0xFE, 0x95, 0x09, 0xA0,
      0x37, 0xCE, 0x42, 0xD9, 0x70, 0x07, 0x7B, 0x12,
      0xA9, 0x1D, 0xB4, 0x4B, 0xE2, 0x56, 0xED, 0x84,
      0x1B, 0x8F, 0x26, 0xBD, 0x31, 0xC8, 0x5F, 0xF6,
      0x6A, 0x01, 0x98, 0x0C, 0xA3, 0x3A, 0xD1, 0x45,
      0xDC, 0x73, 0x0A, 0x7E, 0x15, 0xAC, 0x20, 0xB7,
      0x4E, 0xE5, 0x59, 0xF0, 0x87, 0x1E, 0x92, 0x29,
      0xC0, 0x34, 0xCB, 0x62, 0xF9, 0x6D, 0x04, 0x9B,
      0x0F, 0xA6, 0x3D, 0xD4, 0x48, 0xDF, 0x76, 0x0D,
      0x81, 0x18, 0xAF, 0x23, 0xBA, 0x51, 0xE8, 0x5C,
      0xF3, 0x8A, 0x21, 0x95, 0x2C, 0xC3, 0x37, 0xCE,
      0x65, 0xFC, 0x70, 0x07, 0x9E, 0x12, 0xA9, 0x40,
      0xD7, 0x4B, 0xE2, 0x79, 0x10, 0x84, 0x1B, 0xB2,
      0x26, 0xBD, 0x54, 0xEB, 0x5F, 0xF6, 0x8D, 0x01,
      0x98, 0x2F, 0xC6, 0x3A, 0xD1, 0x68, 0xFF, 0x73,
      0x0A, 0xA1, 0x15, 0xAC, 0x43, 0xDA, 0x4E, 0xE5,
      0x7C, 0x13, 0x87, 0x1E, 0xB5, 0x29, 0xC0, 0x57,
      0xEE, 0x62, 0xF9, 0x90, 0x04, 0x9B, 0x32, 0xC9,
      0x3D, 0xD4, 0x6B, 0x02, 0x76, 0x0D, 0xA4, 0x18,
      0xAF, 0x46, 0xDD, 0x51, 0xE8, 0x7F, 0x16, 0x8A,
      0x21, 0xB8, 0x2C, 0xC3, 0x5A, 0xF1, 0x65, 0xFC,
      0x93, 0x07, 0x9E, 0x35, 0xCC, 0x40, 0xD7, 0x6E,
      0x05, 0x79, 0x10, 0xA7, 0x1B, 0xB2, 0x49, 0xE0,
      0x54, 0xEB, 0x82, 0x19, 0x8D, 0x24, 0xBB, 0x2F,
      0xC6, 0x5D, 0xF4, 0x68, 0xFF, 0x96, 0x0A, 0xA1,
      0x38, 0xCF, 0x43, 0xDA, 0x71, 0x08, 0x7C, 0x13,
      0xAA, 0x1E, 0xB5, 0x4C, 0xE3, 0x57, 0xEE, 0x85,
      0x1C, 0x90, 0x27, 0xBE, 0x32, 0xC9, 0x60, 0xF7,
      0x6B, 0x02, 0x99, 0x0D, 0xA4, 0x3B, 0xD2, 0x46,
      0xDD, 0x74, 0x0B, 0x7F, 0x16, 0xAD, 0x21, 0xB8,
      0x4F, 0xE6, 0x5A, 0xF1, 0x88, 0x1F, 0x93, 0x2A,
      0xC1, 0x35, 0xCC, 0x63, 0xFA, 0x6E, 0x05, 0x9C,
      0x10, 0xA7, 0x3E, 0xD5, 0x49, 0xE0, 0x77, 0x0E,
      0x82, 0x19, 0xB0, 0x24, 0xBB, 0x52, 0xE9, 0x5D,
      0xF4, 0x8B, 0x22, 0x96, 0x2D, 0xC4, 0x38, 0xCF,
      0x66, 0xFD, 0x71, 0x08, 0x9F, 0x13, 0xAA, 0x41,
      0xD8, 0x4C, 0xE3, 0x7A, 0x11, 0x85, 0x1C, 0xB3,
      0x27, 0xBE, 0x55, 0xEC, 0x60, 0xF7, 0x8E, 0x02,
      0x99, 0x30, 0xC7, 0x3B, 0xD2, 0x69, 0x00, 0x74,
      0x0B, 0xA2, 0x16, 0xAD, 0x44, 0xDB, 0x4F, 0xE6,
      0x7D, 0x14, 0x88, 0x1F, 0xB6, 0x2A, 0xC1, 0x58,
      0xEF, 0x63, 0xFA, 0x91, 0x05, 0x9C, 0x33, 0xCA,
      0x3E, 0xD5, 0x6C, 0x03, 0x77, 0x0E, 0xA5, 0x19,
      0xB0, 0x47, 0xDE, 0x52, 0xE9, 0x80, 0x17, 0x8B,
      0x22, 0xB9, 0x2D, 0xC4, 0x5B, 0xF2, 0x66, 0xFD,
      0x94, 0x08, 0x9F, 0x36, 0xCD, 0x41, 0xD8, 0x6F,
      0x06, 0x7A, 0x11, 0xA8, 0x1C, 0xB3, 0x4A, 0xE1,
      0x55, 0xEC, 0x83, 0x1A, 0x8E, 0x25, 0xBC, 0x30,
      0xC7, 0x5E, 0xF5, 0x69, 0x00, 0x97, 0x0B, 0xA2,
      0x39, 0xD0, 0x44, 0xDB, 0x72, 0x09, 0x7D, 0x14,
      0xAB, 0x1F, 0xB6, 0x4D, 0xE4, 0x58, 0xEF, 0x86,
      0x1D, 0x91, 0x28, 0xBF, 0x33, 0xCA, 0x61, 0xF8,
      0x6C, 0x03, 0x9A, 0x0E, 0xA5, 0x3C, 0xD3, 0x47,
      0xDE, 0x75, 0x0C, 0x80, 0x17, 0xAE, 0x22, 0xB9,
      0x50, 0xE7, 0x5B, 0xF2, 0x89, 0x20, 0x94, 0x2B,
      0xC2, 0x36, 0xCD, 0x64, 0xFB, 0x6F, 0x06, 0x9D,
      0x11, 0xA8, 0x3F, 0xD6, 0x4A, 0xE1, 0x78, 0x0F,
      0x83, 0x1A, 0xB1, 0x25, 0xBC, 0x53, 0xEA, 0x5E,
      0xF5, 0x8C, 0x00, 0x97, 0x2E, 0xC5, 0x39, 0xD0,
      0x67, 0xFE, 0x72, 0x09, 0xA0, 0x14, 0xAB, 0x42,
      0xD9, 0x4D, 0xE4, 0x7B, 0x12, 0x86, 0x1D, 0xB4,
      0x28, 0xBF, 0x56, 0xED, 0x61, 0xF8, 0x8F, 0x03,
      0x9A, 0x31, 0xC8, 0x3C, 0xD3, 0x6A, 0x01, 0x75,
      0x0C, 0xA3, 0x17, 0xAE, 0x45, 0xDC, 0x50, 0xE7,
      0x7E, 0x15, 0x89, 0x20, 0xB7, 0x2B, 0xC2, 0x59,
      0xF0, 0x64, 0xFB, 0x92, 0x06, 0x9D, 0x34, 0xCB,
      0x3F, 0xD6, 0x6D, 0x04, 0x78, 0x0F, 0xA6, 0x1A,
      0xB1, 0x48, 0xDF, 0x53, 0xEA, 0x81, 0x18, 0x8C,
      0x23, 0xBA, 0x2E, 0xC5, 0x5C, 0xF3, 0x67, 0xFE,
      0x95, 0x09, 0xA0, 0x37, 0xCE, 0x42, 0xD9, 0x70,
      0x07, 0x7B, 0x12, 0xA9, 0x1D, 0xB4, 0x4B, 0xE2,
      0x56, 0xED, 0x84, 0x1B, 0x8F, 0x26, 0xBD, 0x31,
      0xC8, 0x5F, 0xF6, 0x6A, 0x01, 0x98, 0x0C, 0xA3,
      0x3A, 0xD1, 0x45, 0xDC, 0x73, 0x0A, 0x7E, 0x15,
      0xAC, 0x20, 0xB7, 0x4E, 0xE5, 0x59, 0xF0, 0x87,
      0x1E, 0x92, 0x29, 0xC0, 0x34, 0xCB, 0x62, 0xF9,
      0x6D, 0x04, 0x9B, 0x0F, 0xA6, 0x3D, 0xD4, 0x48,
      0xDF, 0x76, 0x0D, 0x81, 0x18, 0xAF, 0x23, 0xBA,
      0x51, 0xE8, 0x5C, 0xF3, 0x8A, 0x21, 0x95, 0x2C,
      0xC3, 0x37, 0xCE, 0x65, 0xFC, 0x70, 0x07, 0x9E,
      0x12, 0xA9, 0x40, 0xD7, 0x4B, 0xE2, 0x79, 0x10,
      0x84, 0x1B, 0xB2, 0x26, 0xBD, 0x54, 0xEB, 0x5F,
      0xF6, 0x8D, 0x01, 0x98, 0x2F, 0xC6, 0x3A, 0xD1,
      0x68, 0xFF, 0x73, 0x0A, 0xA1, 0x15, 0xAC, 0x43,
      0xDA, 0x4E, 0xE5, 0x7C, 0x13, 0x87, 0x1E, 0xB5,
      0x29, 0xC0, 0x57, 0xEE, 0x62, 0xF9, 0x90, 0x04,
      0x9B, 0x32, 0xC9, 0x3D, 0xD4, 0x6B, 0x02, 0x76,
      0x0D, 0xA4, 0x18, 0xAF, 0x46, 0xDD, 0x51, 0xE8,
      0x7F, 0x16, 0x8A, 0x21, 0xB8, 0x2C, 0xC3, 0x5A,
      0xF1, 0x65, 0xFC, 0x93, 0x07, 0x9E, 0x35, 0xCC,
      0x40, 0xD7, 0x6E, 0x05, 0x79, 0x10, 0xA7, 0x1B,
      0xB2, 0x49, 0xE0, 0x54, 0xEB, 0x82, 0x19, 0x8D,
      0x24, 0xBB, 0x2F, 0xC6, 0x5D, 0xF4, 0x68, 0xFF,
      0x96, 0x0A, 0xA1, 0x38, 0xCF, 0x43, 0xDA, 0x71,
      0x08, 0x7C, 0x13, 0xAA, 0x1E, 0xB5, 0x4C]
    t5_size = 1023
    t5_digest = [
      0xC5, 0xCE, 0x0C, 0xCA, 0x01, 0x4F, 0x53, 0x3A,
      0x32, 0x32, 0x17, 0xCC, 0xD4, 0x6A, 0x71, 0xA9,
      0xF3, 0xED, 0x50, 0x10, 0x64, 0x8E, 0x06, 0xBE,
      0x9B, 0x4A, 0xA6, 0xBB, 0x05, 0x89, 0x59, 0x51]
  testsuite "SHA256" [
    test "NIST0000" [
      expect_memeq "t1_digest" (SHA2.sha256sum t1_message t1_size) t1_digest],
    test "NIST0003" [
      expect_memeq "t2_digest" (SHA2.sha256sum t2_message t2_size) t2_digest],
    test "NIST0056" [
      expect_memeq "t3_digest" (SHA2.sha256sum t3_message t3_size) t3_digest],
    test "NIST0064" [
      expect_memeq "t4_digest" (SHA2.sha256sum t4_message t4_size) t4_digest],
    test "NIST1023" [
      expect_memeq "t5_digest" (SHA2.sha256sum t5_message t5_size) t5_digest]]

test_hmac_sha256 = do
  let
    hmac_sha256 key ksize ptext psize =
      KDF.hmac key ksize ptext psize
      SHA2.sha256sum SHA2.sha256_size_block SHA2.sha256_size_digest
    --  From draft-ietf-ipsec-ciph-sha-256-01.txt
    t01_key = [
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
      0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
      0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20]
    t01_ksize = 32
    t01_ptext = from_str "abc"
    t01_psize = 3
    t01_digest = [
      0xA2, 0x1B, 0x1F, 0x5D, 0x4C, 0xF4, 0xF7, 0x3A,
      0x4D, 0xD9, 0x39, 0x75, 0x0F, 0x7A, 0x06, 0x6A,
      0x7F, 0x98, 0xCC, 0x13, 0x1C, 0xB1, 0x6A, 0x66,
      0x92, 0x75, 0x90, 0x21, 0xCF, 0xAB, 0x81, 0x81]
    t02_key = [
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
      0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
      0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20]
    t02_ksize = 32
    t02_ptext =
      from_str "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
    t02_psize = 56
    t02_digest = [
      0x10, 0x4F, 0xDC, 0x12, 0x57, 0x32, 0x8F, 0x08,
      0x18, 0x4B, 0xA7, 0x31, 0x31, 0xC5, 0x3C, 0xAE,
      0xE6, 0x98, 0xE3, 0x61, 0x19, 0x42, 0x11, 0x49,
      0xEA, 0x8C, 0x71, 0x24, 0x56, 0x69, 0x7D, 0x30]
    t03_key = [
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
      0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
      0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20]
    t03_ksize = 32
    t03_ptext = from_str $
      "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" ++
      "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
    t03_psize = 112
    t03_digest = [
      0x47, 0x03, 0x05, 0xFC, 0x7E, 0x40, 0xFE, 0x34,
      0xD3, 0xEE, 0xB3, 0xE7, 0x73, 0xD9, 0x5A, 0xAB,
      0x73, 0xAC, 0xF0, 0xFD, 0x06, 0x04, 0x47, 0xA5,
      0xEB, 0x45, 0x95, 0xBF, 0x33, 0xA9, 0xD1, 0xA3]
    t04_key = [
      0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
      0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
      0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
      0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B]
    t04_ksize = 32
    t04_ptext = from_str "Hi There"
    t04_psize = 8
    t04_digest = [
      0x19, 0x8A, 0x60, 0x7E, 0xB4, 0x4B, 0xFB, 0xC6,
      0x99, 0x03, 0xA0, 0xF1, 0xCF, 0x2B, 0xBD, 0xC5,
      0xBA, 0x0A, 0xA3, 0xF3, 0xD9, 0xAE, 0x3C, 0x1C,
      0x7A, 0x3B, 0x16, 0x96, 0xA0, 0xB6, 0x8C, 0xF7]
    t05_key = from_str "Jefe"
    t05_ksize = 4
    t05_ptext = from_str "what do ya want for nothing?"
    t05_psize = 28
    t05_digest = [
      0x5B, 0xDC, 0xC1, 0x46, 0xBF, 0x60, 0x75, 0x4E,
      0x6A, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xC7,
      0x5A, 0x00, 0x3F, 0x08, 0x9D, 0x27, 0x39, 0x83,
      0x9D, 0xEC, 0x58, 0xB9, 0x64, 0xEC, 0x38, 0x43]
    t06_key = [
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA
      ]
    t06_ksize = 32
    t06_ptext = [
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
      0xDD, 0xDD]
    t06_psize = 50
    t06_digest = [
      0xCD, 0xCB, 0x12, 0x20, 0xD1, 0xEC, 0xCC, 0xEA,
      0x91, 0xE5, 0x3A, 0xBA, 0x30, 0x92, 0xF9, 0x62,
      0xE5, 0x49, 0xFE, 0x6C, 0xE9, 0xED, 0x7F, 0xDC,
      0x43, 0x19, 0x1F, 0xBD, 0xE4, 0x5C, 0x30, 0xB0]
    t07_key = [
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
      0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
      0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
      0x21, 0x22, 0x23, 0x24, 0x25]
    t07_ksize = 37
    t07_ptext = [
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
      0xCD, 0xCD]
    t07_psize = 50
    t07_digest = [
      0xD4, 0x63, 0x3C, 0x17, 0xF6, 0xFB, 0x8D, 0x74,
      0x4C, 0x66, 0xDE, 0xE0, 0xF8, 0xF0, 0x74, 0x55,
      0x6E, 0xC4, 0xAF, 0x55, 0xEF, 0x07, 0x99, 0x85,
      0x41, 0x46, 0x8E, 0xB4, 0x9B, 0xD2, 0xE9, 0x17]
    t08_key = [
      0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
      0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
      0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
      0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C]
    t08_ksize = 32
    t08_ptext = from_str "Test With Truncation"
    t08_psize = 20
    t08_digest = [
      0x75, 0x46, 0xAF, 0x01, 0x84, 0x1F, 0xC0, 0x9B,
      0x1A, 0xB9, 0xC3, 0x74, 0x9A, 0x5F, 0x1C, 0x17,
      0xD4, 0xF5, 0x89, 0x66, 0x8A, 0x58, 0x7B, 0x27,
      0x00, 0xA9, 0xC9, 0x7C, 0x11, 0x93, 0xCF, 0x42]
    t09_key = [
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
    t09_ksize = 80
    t09_ptext =
      from_str "Test Using Larger Than Block-Size Key - Hash Key First"
    t09_psize = 54
    t09_digest = [
      0x69, 0x53, 0x02, 0x5E, 0xD9, 0x6F, 0x0C, 0x09,
      0xF8, 0x0A, 0x96, 0xF7, 0x8E, 0x65, 0x38, 0xDB,
      0xE2, 0xE7, 0xB8, 0x20, 0xE3, 0xDD, 0x97, 0x0E,
      0x7D, 0xDD, 0x39, 0x09, 0x1B, 0x32, 0x35, 0x2F]
    t10_key = [
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
      0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA]
    t10_ksize = 80
    t10_ptext = from_str $
      "Test Using Larger Than Block-Size Key and Larger Than " ++
      "One Block-Size Data"
    t10_psize = 73
    t10_digest = [
      0x63, 0x55, 0xAC, 0x22, 0xE8, 0x90, 0xD0, 0xA3,
      0xC8, 0x48, 0x1A, 0x5C, 0xA4, 0x82, 0x5B, 0xC8,
      0x84, 0xD3, 0xE7, 0xA1, 0xFF, 0x98, 0xA2, 0xFC,
      0x2A, 0xC7, 0xD8, 0xE0, 0x64, 0xC3, 0xB2, 0xE6]
  testsuite "HMACxSHA256" [
    test "IETFDraft003" [
      expect_memeq "t01_digest"
        (hmac_sha256 t01_key t01_ksize t01_ptext t01_psize) t01_digest],
    test "IETFDraft056" [
      expect_memeq "t02_digest"
        (hmac_sha256 t02_key t02_ksize t02_ptext t02_psize) t02_digest],
    test "IETFDraft112" [
      expect_memeq "t03_digest"
        (hmac_sha256 t03_key t03_ksize t03_ptext t03_psize) t03_digest],
    test "IETFDraft008" [
      expect_memeq "t04_digest"
        (hmac_sha256 t04_key t04_ksize t04_ptext t04_psize) t04_digest],
    test "IETFDraft028" [
      expect_memeq "t05_digest"
        (hmac_sha256 t05_key t05_ksize t05_ptext t05_psize) t05_digest],
    test "IETFDraft050x32" [
      expect_memeq "t06_digest"
        (hmac_sha256 t06_key t06_ksize t06_ptext t06_psize) t06_digest],
    test "IETFDraft050x37" [
      expect_memeq "t07_digest"
        (hmac_sha256 t07_key t07_ksize t07_ptext t07_psize) t07_digest],
    test "IETFDraft020" [
      expect_memeq "t08_digest"
        (hmac_sha256 t08_key t08_ksize t08_ptext t08_psize) t08_digest],
    test "IETFDraft054" [
      expect_memeq "t09_digest"
        (hmac_sha256 t09_key t09_ksize t09_ptext t09_psize) t09_digest],
    test "IETFDraft073" [
      expect_memeq "t10_digest"
        (hmac_sha256 t10_key t10_ksize t10_ptext t10_psize) t10_digest]]

test_pbkdf2_hmac_sha256 = do
  let
    pbkdf2_hmac_sha256 pass psize salt ssize c dk_len =
      KDF.pbkdf2 prf SHA2.sha256_size_digest pass psize salt ssize c dk_len
      where
        prf k k_size text text_size = KDF.hmac k k_size text text_size
          SHA2.sha256sum SHA2.sha256_size_block SHA2.sha256_size_digest
    --  From RFC 7914
    t1_pass = from_str "passwd"
    t1_psize = 6
    t1_salt = from_str "salt"
    t1_ssize = 4
    t1_c = 1
    t1_dk_len = 64
    t1_derived = [
      0x55, 0xAC, 0x04, 0x6E, 0x56, 0xE3, 0x08, 0x9F,
      0xEC, 0x16, 0x91, 0xC2, 0x25, 0x44, 0xB6, 0x05,
      0xF9, 0x41, 0x85, 0x21, 0x6D, 0xDE, 0x04, 0x65,
      0xE6, 0x8B, 0x9D, 0x57, 0xC2, 0x0D, 0xAC, 0xBC,
      0x49, 0xCA, 0x9C, 0xCC, 0xF1, 0x79, 0xB6, 0x45,
      0x99, 0x16, 0x64, 0xB3, 0x9D, 0x77, 0xEF, 0x31,
      0x7C, 0x71, 0xB8, 0x45, 0xB1, 0xE3, 0x0B, 0xD5,
      0x09, 0x11, 0x20, 0x41, 0xD3, 0xA1, 0x97, 0x83]
    t2_pass = from_str "Password"
    t2_psize = 8
    t2_salt = from_str "NaCl"
    t2_ssize = 4
    t2_c = 80000
    t2_dk_len = 64
    t2_derived = [
      0x4D, 0xDC, 0xD8, 0xF6, 0x0B, 0x98, 0xBE, 0x21,
      0x83, 0x0C, 0xEE, 0x5E, 0xF2, 0x27, 0x01, 0xF9,
      0x64, 0x1A, 0x44, 0x18, 0xD0, 0x4C, 0x04, 0x14,
      0xAE, 0xFF, 0x08, 0x87, 0x6B, 0x34, 0xAB, 0x56,
      0xA1, 0xD4, 0x25, 0xA1, 0x22, 0x58, 0x33, 0x54,
      0x9A, 0xDB, 0x84, 0x1B, 0x51, 0xC9, 0xB3, 0x17,
      0x6A, 0x27, 0x2B, 0xDE, 0xBB, 0xA1, 0xD0, 0x78,
      0x47, 0x8F, 0x62, 0xB3, 0x97, 0xF3, 0x3C, 0x8D]
    -- from cryptsetup
    t3_pass = from_str $ "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ++
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    t3_psize = 65
    t3_salt = from_str "pass phrase exceeds block size"
    t3_ssize = 30
    t3_c = 1200
    t3_dk_len = 32
    t3_derived = [
      0x22, 0x34, 0x4B, 0xC4, 0xB6, 0xE3, 0x26, 0x75,
      0xA8, 0x09, 0x0F, 0x3E, 0xA8, 0x0B, 0xE0, 0x1D,
      0x5F, 0x95, 0x12, 0x6A, 0x2C, 0xDD, 0xC3, 0xFA,
      0xCC, 0x4A, 0x5E, 0x6D, 0xCA, 0x04, 0xEC, 0x58]
  testsuite "PBKDF2xHMACxSHA256" [
    test "RFC7914x00001" [
      expect_memeq "t1_derived"
        (pbkdf2_hmac_sha256 t1_pass t1_psize t1_salt t1_ssize t1_c t1_dk_len)
        t1_derived],
    test "RFC7914x80000" [
      expect_memeq "t2_derived"
        (pbkdf2_hmac_sha256 t2_pass t2_psize t2_salt t2_ssize t2_c t2_dk_len)
        t2_derived],
    test "Cryptsetup01200" [
      expect_memeq "t3_derived"
        (pbkdf2_hmac_sha256 t3_pass t3_psize t3_salt t3_ssize t3_c t3_dk_len)
        t3_derived]]

main :: IO ()
main =
  test_aes256 >>
  test_aes256_cbc >>
  test_sha256 >>
  test_hmac_sha256 >>
  test_pbkdf2_hmac_sha256 >>
  return ()
