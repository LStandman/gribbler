-- SPDX-License-Identifier: GPL-3.0-or-later
-- Crypt/SHA2Test.hs: Unit tests for SHA2
-- Copyright (C) 2021-2024 LStandman

module Crypt.SHA2Test(test_sha256) where

import qualified Crypt.SHA2 as SHA2
import Libtest
import Misc.MemUtils

test_sha256 =
  let
    --  SHA256 test vectors from NIST.
    t1_message = strBytes ""
    t1_size    = 0
    t1_digest  = [
      0xE3, 0xB0, 0xC4, 0x42, 0x98, 0xFC, 0x1C, 0x14,
      0x9A, 0xFB, 0xF4, 0xC8, 0x99, 0x6F, 0xB9, 0x24,
      0x27, 0xAE, 0x41, 0xE4, 0x64, 0x9B, 0x93, 0x4C,
      0xA4, 0x95, 0x99, 0x1B, 0x78, 0x52, 0xB8, 0x55]
    t2_message = strBytes "abc"
    t2_size    = 3
    t2_digest  = [
      0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
      0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
      0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
      0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD]
    t3_message =
      strBytes "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
    t3_size    = 56
    t3_digest  = [
      0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
      0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
      0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
      0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1]
    t4_message = strBytes ("ABCDEFGHIJKLMNOPQRSTUVWXYZ" ++
      "abcdefghijklmnopqrstuvwxyz0123456789+-")
    t4_size    = 64
    t4_digest  = [
      0xB5, 0xFE, 0xAD, 0x56, 0x7D, 0xFF, 0xCB, 0xA4,
      0x2C, 0x32, 0x29, 0x32, 0x19, 0xBB, 0xFB, 0xFA,
      0xD6, 0xFF, 0x94, 0xA3, 0x72, 0x91, 0x85, 0x66,
      0x3B, 0xA7, 0x87, 0x77, 0x58, 0xA3, 0x40, 0x3A]
    t5_message = [
      0x08, 0x9F, 0x13, 0xAA, 0x41, 0xD8, 0x4C, 0xE3,
      0x7A, 0x11, 0x85, 0x1C, 0xB3, 0x27, 0xBE, 0x55,
      0xEC, 0x60, 0xF7, 0x8E, 0x02, 0x99, 0x30, 0xC7,
      0x3B, 0xD2, 0x69, 0x00, 0x74, 0x0B, 0xA2, 0x16,
      0xAD, 0x44, 0xDB, 0x4F, 0xE6, 0x7D, 0x14, 0x88,
      0x1F, 0xB6, 0x2A, 0xC1, 0x58, 0xEF, 0x63, 0xFA,
      0x91, 0x05, 0x9C, 0x33, 0xCA, 0x3E, 0xD5, 0x6C,
      0x03, 0x77, 0x0E, 0xA5, 0x19, 0xB0, 0x47, 0xDE,
      0x52, 0xE9, 0x80, 0x17, 0x8B, 0x22, 0xB9, 0x2D,
      0xC4, 0x5B, 0xF2, 0x66, 0xFD, 0x94, 0x08, 0x9F,
      0x36, 0xCD, 0x41, 0xD8, 0x6F, 0x06, 0x7A, 0x11,
      0xA8, 0x1C, 0xB3, 0x4A, 0xE1, 0x55, 0xEC, 0x83,
      0x1A, 0x8E, 0x25, 0xBC, 0x30, 0xC7, 0x5E, 0xF5,
      0x69, 0x00, 0x97, 0x0B, 0xA2, 0x39, 0xD0, 0x44,
      0xDB, 0x72, 0x09, 0x7D, 0x14, 0xAB, 0x1F, 0xB6,
      0x4D, 0xE4, 0x58, 0xEF, 0x86, 0x1D, 0x91, 0x28,
      0xBF, 0x33, 0xCA, 0x61, 0xF8, 0x6C, 0x03, 0x9A,
      0x0E, 0xA5, 0x3C, 0xD3, 0x47, 0xDE, 0x75, 0x0C,
      0x80, 0x17, 0xAE, 0x22, 0xB9, 0x50, 0xE7, 0x5B,
      0xF2, 0x89, 0x20, 0x94, 0x2B, 0xC2, 0x36, 0xCD,
      0x64, 0xFB, 0x6F, 0x06, 0x9D, 0x11, 0xA8, 0x3F,
      0xD6, 0x4A, 0xE1, 0x78, 0x0F, 0x83, 0x1A, 0xB1,
      0x25, 0xBC, 0x53, 0xEA, 0x5E, 0xF5, 0x8C, 0x00,
      0x97, 0x2E, 0xC5, 0x39, 0xD0, 0x67, 0xFE, 0x72,
      0x09, 0xA0, 0x14, 0xAB, 0x42, 0xD9, 0x4D, 0xE4,
      0x7B, 0x12, 0x86, 0x1D, 0xB4, 0x28, 0xBF, 0x56,
      0xED, 0x61, 0xF8, 0x8F, 0x03, 0x9A, 0x31, 0xC8,
      0x3C, 0xD3, 0x6A, 0x01, 0x75, 0x0C, 0xA3, 0x17,
      0xAE, 0x45, 0xDC, 0x50, 0xE7, 0x7E, 0x15, 0x89,
      0x20, 0xB7, 0x2B, 0xC2, 0x59, 0xF0, 0x64, 0xFB,
      0x92, 0x06, 0x9D, 0x34, 0xCB, 0x3F, 0xD6, 0x6D,
      0x04, 0x78, 0x0F, 0xA6, 0x1A, 0xB1, 0x48, 0xDF,
      0x53, 0xEA, 0x81, 0x18, 0x8C, 0x23, 0xBA, 0x2E,
      0xC5, 0x5C, 0xF3, 0x67, 0xFE, 0x95, 0x09, 0xA0,
      0x37, 0xCE, 0x42, 0xD9, 0x70, 0x07, 0x7B, 0x12,
      0xA9, 0x1D, 0xB4, 0x4B, 0xE2, 0x56, 0xED, 0x84,
      0x1B, 0x8F, 0x26, 0xBD, 0x31, 0xC8, 0x5F, 0xF6,
      0x6A, 0x01, 0x98, 0x0C, 0xA3, 0x3A, 0xD1, 0x45,
      0xDC, 0x73, 0x0A, 0x7E, 0x15, 0xAC, 0x20, 0xB7,
      0x4E, 0xE5, 0x59, 0xF0, 0x87, 0x1E, 0x92, 0x29,
      0xC0, 0x34, 0xCB, 0x62, 0xF9, 0x6D, 0x04, 0x9B,
      0x0F, 0xA6, 0x3D, 0xD4, 0x48, 0xDF, 0x76, 0x0D,
      0x81, 0x18, 0xAF, 0x23, 0xBA, 0x51, 0xE8, 0x5C,
      0xF3, 0x8A, 0x21, 0x95, 0x2C, 0xC3, 0x37, 0xCE,
      0x65, 0xFC, 0x70, 0x07, 0x9E, 0x12, 0xA9, 0x40,
      0xD7, 0x4B, 0xE2, 0x79, 0x10, 0x84, 0x1B, 0xB2,
      0x26, 0xBD, 0x54, 0xEB, 0x5F, 0xF6, 0x8D, 0x01,
      0x98, 0x2F, 0xC6, 0x3A, 0xD1, 0x68, 0xFF, 0x73,
      0x0A, 0xA1, 0x15, 0xAC, 0x43, 0xDA, 0x4E, 0xE5,
      0x7C, 0x13, 0x87, 0x1E, 0xB5, 0x29, 0xC0, 0x57,
      0xEE, 0x62, 0xF9, 0x90, 0x04, 0x9B, 0x32, 0xC9,
      0x3D, 0xD4, 0x6B, 0x02, 0x76, 0x0D, 0xA4, 0x18,
      0xAF, 0x46, 0xDD, 0x51, 0xE8, 0x7F, 0x16, 0x8A,
      0x21, 0xB8, 0x2C, 0xC3, 0x5A, 0xF1, 0x65, 0xFC,
      0x93, 0x07, 0x9E, 0x35, 0xCC, 0x40, 0xD7, 0x6E,
      0x05, 0x79, 0x10, 0xA7, 0x1B, 0xB2, 0x49, 0xE0,
      0x54, 0xEB, 0x82, 0x19, 0x8D, 0x24, 0xBB, 0x2F,
      0xC6, 0x5D, 0xF4, 0x68, 0xFF, 0x96, 0x0A, 0xA1,
      0x38, 0xCF, 0x43, 0xDA, 0x71, 0x08, 0x7C, 0x13,
      0xAA, 0x1E, 0xB5, 0x4C, 0xE3, 0x57, 0xEE, 0x85,
      0x1C, 0x90, 0x27, 0xBE, 0x32, 0xC9, 0x60, 0xF7,
      0x6B, 0x02, 0x99, 0x0D, 0xA4, 0x3B, 0xD2, 0x46,
      0xDD, 0x74, 0x0B, 0x7F, 0x16, 0xAD, 0x21, 0xB8,
      0x4F, 0xE6, 0x5A, 0xF1, 0x88, 0x1F, 0x93, 0x2A,
      0xC1, 0x35, 0xCC, 0x63, 0xFA, 0x6E, 0x05, 0x9C,
      0x10, 0xA7, 0x3E, 0xD5, 0x49, 0xE0, 0x77, 0x0E,
      0x82, 0x19, 0xB0, 0x24, 0xBB, 0x52, 0xE9, 0x5D,
      0xF4, 0x8B, 0x22, 0x96, 0x2D, 0xC4, 0x38, 0xCF,
      0x66, 0xFD, 0x71, 0x08, 0x9F, 0x13, 0xAA, 0x41,
      0xD8, 0x4C, 0xE3, 0x7A, 0x11, 0x85, 0x1C, 0xB3,
      0x27, 0xBE, 0x55, 0xEC, 0x60, 0xF7, 0x8E, 0x02,
      0x99, 0x30, 0xC7, 0x3B, 0xD2, 0x69, 0x00, 0x74,
      0x0B, 0xA2, 0x16, 0xAD, 0x44, 0xDB, 0x4F, 0xE6,
      0x7D, 0x14, 0x88, 0x1F, 0xB6, 0x2A, 0xC1, 0x58,
      0xEF, 0x63, 0xFA, 0x91, 0x05, 0x9C, 0x33, 0xCA,
      0x3E, 0xD5, 0x6C, 0x03, 0x77, 0x0E, 0xA5, 0x19,
      0xB0, 0x47, 0xDE, 0x52, 0xE9, 0x80, 0x17, 0x8B,
      0x22, 0xB9, 0x2D, 0xC4, 0x5B, 0xF2, 0x66, 0xFD,
      0x94, 0x08, 0x9F, 0x36, 0xCD, 0x41, 0xD8, 0x6F,
      0x06, 0x7A, 0x11, 0xA8, 0x1C, 0xB3, 0x4A, 0xE1,
      0x55, 0xEC, 0x83, 0x1A, 0x8E, 0x25, 0xBC, 0x30,
      0xC7, 0x5E, 0xF5, 0x69, 0x00, 0x97, 0x0B, 0xA2,
      0x39, 0xD0, 0x44, 0xDB, 0x72, 0x09, 0x7D, 0x14,
      0xAB, 0x1F, 0xB6, 0x4D, 0xE4, 0x58, 0xEF, 0x86,
      0x1D, 0x91, 0x28, 0xBF, 0x33, 0xCA, 0x61, 0xF8,
      0x6C, 0x03, 0x9A, 0x0E, 0xA5, 0x3C, 0xD3, 0x47,
      0xDE, 0x75, 0x0C, 0x80, 0x17, 0xAE, 0x22, 0xB9,
      0x50, 0xE7, 0x5B, 0xF2, 0x89, 0x20, 0x94, 0x2B,
      0xC2, 0x36, 0xCD, 0x64, 0xFB, 0x6F, 0x06, 0x9D,
      0x11, 0xA8, 0x3F, 0xD6, 0x4A, 0xE1, 0x78, 0x0F,
      0x83, 0x1A, 0xB1, 0x25, 0xBC, 0x53, 0xEA, 0x5E,
      0xF5, 0x8C, 0x00, 0x97, 0x2E, 0xC5, 0x39, 0xD0,
      0x67, 0xFE, 0x72, 0x09, 0xA0, 0x14, 0xAB, 0x42,
      0xD9, 0x4D, 0xE4, 0x7B, 0x12, 0x86, 0x1D, 0xB4,
      0x28, 0xBF, 0x56, 0xED, 0x61, 0xF8, 0x8F, 0x03,
      0x9A, 0x31, 0xC8, 0x3C, 0xD3, 0x6A, 0x01, 0x75,
      0x0C, 0xA3, 0x17, 0xAE, 0x45, 0xDC, 0x50, 0xE7,
      0x7E, 0x15, 0x89, 0x20, 0xB7, 0x2B, 0xC2, 0x59,
      0xF0, 0x64, 0xFB, 0x92, 0x06, 0x9D, 0x34, 0xCB,
      0x3F, 0xD6, 0x6D, 0x04, 0x78, 0x0F, 0xA6, 0x1A,
      0xB1, 0x48, 0xDF, 0x53, 0xEA, 0x81, 0x18, 0x8C,
      0x23, 0xBA, 0x2E, 0xC5, 0x5C, 0xF3, 0x67, 0xFE,
      0x95, 0x09, 0xA0, 0x37, 0xCE, 0x42, 0xD9, 0x70,
      0x07, 0x7B, 0x12, 0xA9, 0x1D, 0xB4, 0x4B, 0xE2,
      0x56, 0xED, 0x84, 0x1B, 0x8F, 0x26, 0xBD, 0x31,
      0xC8, 0x5F, 0xF6, 0x6A, 0x01, 0x98, 0x0C, 0xA3,
      0x3A, 0xD1, 0x45, 0xDC, 0x73, 0x0A, 0x7E, 0x15,
      0xAC, 0x20, 0xB7, 0x4E, 0xE5, 0x59, 0xF0, 0x87,
      0x1E, 0x92, 0x29, 0xC0, 0x34, 0xCB, 0x62, 0xF9,
      0x6D, 0x04, 0x9B, 0x0F, 0xA6, 0x3D, 0xD4, 0x48,
      0xDF, 0x76, 0x0D, 0x81, 0x18, 0xAF, 0x23, 0xBA,
      0x51, 0xE8, 0x5C, 0xF3, 0x8A, 0x21, 0x95, 0x2C,
      0xC3, 0x37, 0xCE, 0x65, 0xFC, 0x70, 0x07, 0x9E,
      0x12, 0xA9, 0x40, 0xD7, 0x4B, 0xE2, 0x79, 0x10,
      0x84, 0x1B, 0xB2, 0x26, 0xBD, 0x54, 0xEB, 0x5F,
      0xF6, 0x8D, 0x01, 0x98, 0x2F, 0xC6, 0x3A, 0xD1,
      0x68, 0xFF, 0x73, 0x0A, 0xA1, 0x15, 0xAC, 0x43,
      0xDA, 0x4E, 0xE5, 0x7C, 0x13, 0x87, 0x1E, 0xB5,
      0x29, 0xC0, 0x57, 0xEE, 0x62, 0xF9, 0x90, 0x04,
      0x9B, 0x32, 0xC9, 0x3D, 0xD4, 0x6B, 0x02, 0x76,
      0x0D, 0xA4, 0x18, 0xAF, 0x46, 0xDD, 0x51, 0xE8,
      0x7F, 0x16, 0x8A, 0x21, 0xB8, 0x2C, 0xC3, 0x5A,
      0xF1, 0x65, 0xFC, 0x93, 0x07, 0x9E, 0x35, 0xCC,
      0x40, 0xD7, 0x6E, 0x05, 0x79, 0x10, 0xA7, 0x1B,
      0xB2, 0x49, 0xE0, 0x54, 0xEB, 0x82, 0x19, 0x8D,
      0x24, 0xBB, 0x2F, 0xC6, 0x5D, 0xF4, 0x68, 0xFF,
      0x96, 0x0A, 0xA1, 0x38, 0xCF, 0x43, 0xDA, 0x71,
      0x08, 0x7C, 0x13, 0xAA, 0x1E, 0xB5, 0x4C]
    t5_size    = 1023
    t5_digest  = [
      0xC5, 0xCE, 0x0C, 0xCA, 0x01, 0x4F, 0x53, 0x3A,
      0x32, 0x32, 0x17, 0xCC, 0xD4, 0x6A, 0x71, 0xA9,
      0xF3, 0xED, 0x50, 0x10, 0x64, 0x8E, 0x06, 0xBE,
      0x9B, 0x4A, 0xA6, 0xBB, 0x05, 0x89, 0x59, 0x51]
  in
    testsuite "SHA256" [
      test "NIST0000" [
        expect_memeq "t1_digest" t1_digest $ SHA2.sha256sum t1_message t1_size],
      test "NIST0003" [
        expect_memeq "t2_digest" t2_digest $ SHA2.sha256sum t2_message t2_size],
      test "NIST0056" [
        expect_memeq "t3_digest" t3_digest $ SHA2.sha256sum t3_message t3_size],
      test "NIST0064" [
        expect_memeq "t4_digest" t4_digest $ SHA2.sha256sum t4_message t4_size],
      test "NIST1023" [
        expect_memeq "t5_digest" t5_digest $ SHA2.sha256sum t5_message t5_size]]
